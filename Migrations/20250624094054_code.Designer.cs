// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trash_Track.Models;

#nullable disable

namespace Trash_Track.Migrations
{
    [DbContext(typeof(TrashDBContext))]
    [Migration("20250624094054_code")]
    partial class code
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Trash_Track.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "9801000001",
                            Name = "Ram Bahadur",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Contact = "9801000002",
                            Name = "Shyam Lal",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Contact = "9801000003",
                            Name = "Sita Thapa",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Contact = "9801000004",
                            Name = "Gopal Basnet",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Contact = "9801000005",
                            Name = "Nisha Shrestha",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Trash_Track.Models.PickupOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<TimeSpan?>("NewTime")
                        .HasColumnType("time");

                    b.Property<int?>("OverrideDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("WardId");

                    b.ToTable("PickupOverrides");
                });

            modelBuilder.Entity("Trash_Track.Models.PickupSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("PickupDay")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PickupTime")
                        .HasColumnType("time");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("WardId")
                        .IsUnique();

                    b.ToTable("PickupSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PickupDay = 0,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 1
                        },
                        new
                        {
                            Id = 2,
                            PickupDay = 1,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 2
                        },
                        new
                        {
                            Id = 3,
                            PickupDay = 2,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 3
                        },
                        new
                        {
                            Id = 4,
                            PickupDay = 3,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 4
                        },
                        new
                        {
                            Id = 5,
                            PickupDay = 4,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 5
                        },
                        new
                        {
                            Id = 6,
                            PickupDay = 5,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 6
                        },
                        new
                        {
                            Id = 7,
                            PickupDay = 6,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 7
                        },
                        new
                        {
                            Id = 8,
                            PickupDay = 0,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 8
                        },
                        new
                        {
                            Id = 9,
                            PickupDay = 1,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 9
                        },
                        new
                        {
                            Id = 10,
                            PickupDay = 2,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 10
                        },
                        new
                        {
                            Id = 11,
                            PickupDay = 3,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 11
                        },
                        new
                        {
                            Id = 12,
                            PickupDay = 4,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 12
                        },
                        new
                        {
                            Id = 13,
                            PickupDay = 5,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 13
                        },
                        new
                        {
                            Id = 14,
                            PickupDay = 6,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 14
                        },
                        new
                        {
                            Id = 15,
                            PickupDay = 0,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 15
                        },
                        new
                        {
                            Id = 16,
                            PickupDay = 1,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 16
                        },
                        new
                        {
                            Id = 17,
                            PickupDay = 2,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 17
                        },
                        new
                        {
                            Id = 18,
                            PickupDay = 3,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 18
                        },
                        new
                        {
                            Id = 19,
                            PickupDay = 4,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 19
                        },
                        new
                        {
                            Id = 20,
                            PickupDay = 5,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 20
                        },
                        new
                        {
                            Id = 21,
                            PickupDay = 6,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 21
                        },
                        new
                        {
                            Id = 22,
                            PickupDay = 0,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 22
                        },
                        new
                        {
                            Id = 23,
                            PickupDay = 1,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 23
                        },
                        new
                        {
                            Id = 24,
                            PickupDay = 2,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 24
                        },
                        new
                        {
                            Id = 25,
                            PickupDay = 3,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 25
                        },
                        new
                        {
                            Id = 26,
                            PickupDay = 4,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 26
                        },
                        new
                        {
                            Id = 27,
                            PickupDay = 5,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 27
                        },
                        new
                        {
                            Id = 28,
                            PickupDay = 6,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 28
                        },
                        new
                        {
                            Id = 29,
                            PickupDay = 0,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 29
                        },
                        new
                        {
                            Id = 30,
                            PickupDay = 1,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 30
                        },
                        new
                        {
                            Id = 31,
                            PickupDay = 2,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 31
                        },
                        new
                        {
                            Id = 32,
                            PickupDay = 3,
                            PickupTime = new TimeSpan(0, 6, 0, 0, 0),
                            WardId = 32
                        });
                });

            modelBuilder.Entity("Trash_Track.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedDriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDriverId");

                    b.HasIndex("WardId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Trash_Track.Models.ReportPickupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPickedUp")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PickupTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportPickupStatuses");
                });

            modelBuilder.Entity("Trash_Track.Models.Trash_Track.Models.DriverPickupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("DriverPickupStatuses");
                });

            modelBuilder.Entity("Trash_Track.Models.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dilli Bazaar",
                            No = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Maitidevi",
                            No = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gaushala",
                            No = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gyaneshwor",
                            No = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Baneshwor",
                            No = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tinkune",
                            No = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sinamangal",
                            No = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tilganga",
                            No = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Old Baneshwor",
                            No = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "New Baneshwor",
                            No = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "Minbhawan",
                            No = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = "Shantinagar",
                            No = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = "Anamnagar",
                            No = 13
                        },
                        new
                        {
                            Id = 14,
                            Name = "Babarmahal",
                            No = 14
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tripureshwor",
                            No = 15
                        },
                        new
                        {
                            Id = 16,
                            Name = "Thapathali",
                            No = 16
                        },
                        new
                        {
                            Id = 17,
                            Name = "Teku",
                            No = 17
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kalimati",
                            No = 18
                        },
                        new
                        {
                            Id = 19,
                            Name = "Balkhu",
                            No = 19
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kuleshwor",
                            No = 20
                        },
                        new
                        {
                            Id = 21,
                            Name = "Chhetrapati",
                            No = 21
                        },
                        new
                        {
                            Id = 22,
                            Name = "Indra Chowk",
                            No = 22
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ason",
                            No = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = "Basantapur",
                            No = 24
                        },
                        new
                        {
                            Id = 25,
                            Name = "Thamel",
                            No = 25
                        },
                        new
                        {
                            Id = 26,
                            Name = "Lazimpat",
                            No = 26
                        },
                        new
                        {
                            Id = 27,
                            Name = "Maharajgunj",
                            No = 27
                        },
                        new
                        {
                            Id = 28,
                            Name = "Baluwatar",
                            No = 28
                        },
                        new
                        {
                            Id = 29,
                            Name = "Budhanilkantha",
                            No = 29
                        },
                        new
                        {
                            Id = 30,
                            Name = "Gongabu",
                            No = 30
                        },
                        new
                        {
                            Id = 31,
                            Name = "Tokha",
                            No = 31
                        },
                        new
                        {
                            Id = 32,
                            Name = "Samakhusi",
                            No = 32
                        });
                });

            modelBuilder.Entity("Trash_Track.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trash_Track.Models.Driver", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trash_Track.Models.PickupOverride", b =>
                {
                    b.HasOne("Trash_Track.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("Trash_Track.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Trash_Track.Models.PickupSchedule", b =>
                {
                    b.HasOne("Trash_Track.Models.Driver", "Driver")
                        .WithMany("AssignedPickupSchedules")
                        .HasForeignKey("DriverId");

                    b.HasOne("Trash_Track.Models.Ward", "Ward")
                        .WithOne("PickupSchedule")
                        .HasForeignKey("Trash_Track.Models.PickupSchedule", "WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Trash_Track.Models.Report", b =>
                {
                    b.HasOne("Trash_Track.Models.Driver", "AssignedDriver")
                        .WithMany("AssignedReports")
                        .HasForeignKey("AssignedDriverId");

                    b.HasOne("Trash_Track.Models.Ward", "Ward")
                        .WithMany("Reports")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedDriver");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Trash_Track.Models.ReportPickupStatus", b =>
                {
                    b.HasOne("Trash_Track.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trash_Track.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Trash_Track.Models.Trash_Track.Models.DriverPickupStatus", b =>
                {
                    b.HasOne("Trash_Track.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trash_Track.Models.PickupSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Trash_Track.Models.Driver", b =>
                {
                    b.Navigation("AssignedPickupSchedules");

                    b.Navigation("AssignedReports");
                });

            modelBuilder.Entity("Trash_Track.Models.Ward", b =>
                {
                    b.Navigation("PickupSchedule")
                        .IsRequired();

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
